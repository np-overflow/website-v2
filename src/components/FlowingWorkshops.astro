---
import { getEvents } from '../lib/api'
import * as workshopImages from '../images/workshops'

const events = getEvents()
const workshops = events.type.find(type => type.title === "Workshops")?.events || []

// Get random image for each workshop
const workshopData = workshops
  .map((workshop, index) => {
    if (!workshop.workshop_folder) return null
    
    // Get images for this workshop
    const folderImages = Object.entries(workshopImages)
      .filter(([key]) => key.startsWith(workshop.workshop_folder!.replace(' ', '')))
      .map(([, imageModule]) => (imageModule as any).src)
    
    if (folderImages.length === 0) return null
    
    const randomImage = folderImages[Math.floor(Math.random() * folderImages.length)]
    return {
      title: workshop.title,
      image: randomImage,
    }
  })
  .filter((item): item is NonNullable<typeof item> => item !== null)

const mobileItemCount = Math.min(workshopData.length, Math.floor(workshopData.length * 0.6))
const desktopItemCount = workshopData.length

// Omg math - different bounds for mobile and desktop
const duration = 25
const topBound = 15
const mobileBottomBound = 35
const desktopBottomBound = 55
const mobileUsableRange = Math.max(0, mobileBottomBound - topBound)
const desktopUsableRange = Math.max(0, desktopBottomBound - topBound)

// Helper: Fisher-Yates shuffle
function shuffle<T>(arr: T[]): T[] {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    const tmp = arr[i]
    arr[i] = arr[j]
    arr[j] = tmp
  }
  return arr
}

// Create positions for both mobile and desktop
function createWorkshopItems(count: number, dataSet: typeof workshopData, isMobile: boolean) {
  const usableRange = isMobile ? mobileUsableRange : desktopUsableRange
  const bottomBound = isMobile ? mobileBottomBound : desktopBottomBound
  
  const yPositions = Array.from({ length: count }, (_, k) => {
    const segment = usableRange / Math.max(1, count)
    return topBound + (k + 0.5) * segment
  })
  shuffle(yPositions)

  const phases = Array.from({ length: count }, (_, k) => (k + 0.5) / Math.max(1, count))
  shuffle(phases)

  return dataSet.slice(0, count).map((item, i) => {
    // Y with tiny jitter and clamped to inner bounds to avoid edge touches
    const yJitter = (Math.random() * 0.6) - 0.3
    const yRaw = yPositions[i] + yJitter
    const y = Math.max(topBound + 1, Math.min(bottomBound - 1, yRaw))

    const phase = phases[i]
    const delayJitter = (Math.random() * 1.5) - 0.75
    const delay = -(phase * duration) + delayJitter

    const borderColor = i % 3 === 0 ? 'border-white' : i % 3 === 1 ? 'border-gray-300' : 'border-orange-400'
    const borderStyle = Math.random() > 0.5 ? 'border-2' : 'border-2 border-dotted'
    const border = `${borderStyle} ${borderColor}`
    const tilt = (Math.random() - 0.5) * 40

    return { ...item, y, delay, border, tilt }
  })
}

const mobileWorkshopItems = createWorkshopItems(mobileItemCount, workshopData, true)
const desktopWorkshopItems = createWorkshopItems(desktopItemCount, workshopData, false)

---

<div class="relative overflow-hidden flowing-workshop-container">
  <!-- Mobile workshops -->
  {mobileWorkshopItems.map((workshop, index) => (
    <div 
      class={`absolute w-48 h-36 ${workshop.border} rounded-lg bg-white p-2 flowing-workshop xl:hidden`}
      style={`
        top: ${workshop.y}%;
        --tilt: ${workshop.tilt}deg;
        transform: translateX(calc(100vw + 200px)) rotate(${workshop.tilt}deg);
        animation: flow-right-to-left-mobile 25s linear infinite;
        animation-delay: ${workshop.delay}s;
      `}
    >
      <img 
        src={workshop.image} 
        alt={workshop.title}
        class="w-full h-24 object-cover rounded"
      />
      <p class="text-xs font-medium text-center text-gray-800 mt-1 px-1">{workshop.title}</p>
    </div>
  ))}
  
  <!-- Desktop workshops -->
  {desktopWorkshopItems.map((workshop, index) => (
    <div 
      class={`absolute w-60 h-45 ${workshop.border} rounded-lg bg-white p-2 flowing-workshop hidden xl:block`}
      style={`
        top: ${workshop.y}%;
        --tilt: ${workshop.tilt}deg;
        transform: translateX(calc(100vw + 250px)) rotate(${workshop.tilt}deg);
        animation: flow-right-to-left 25s linear infinite;
        animation-delay: ${workshop.delay}s;
      `}
    >
      <img 
        src={workshop.image} 
        alt={workshop.title}
        class="w-full h-32 object-cover rounded"
      />
      <p class="text-sm font-medium text-center text-gray-800 mt-2 px-1">{workshop.title}</p>
    </div>
  ))}
  
  <div class="absolute inset-y-0 left-0 w-32 bg-gradient-to-r from-[#f6f7fc] dark:from-[#000212] to-transparent pointer-events-none z-10"></div>
  <div class="absolute inset-y-0 right-0 w-32 bg-gradient-to-l from-[#f6f7fc] dark:from-[#000212] to-transparent pointer-events-none z-10"></div>

</div>

<style>
  @keyframes flow-right-to-left {
    from {
      transform: translateX(calc(100vw + 250px)) rotate(var(--tilt));
    }
    to {
      transform: translateX(-300px) rotate(var(--tilt));
    }
  }
  
  @keyframes flow-right-to-left-mobile {
    from {
      transform: translateX(calc(100vw + 200px)) rotate(var(--tilt));
    }
    to {
      transform: translateX(-250px) rotate(var(--tilt));
    }
  }
  
  .flowing-workshop {
    --tilt: 0deg;
  }
  
  .flowing-workshop-container {
    height: 50vh;
  }

  @media (max-width: 1279px) {
    .flowing-workshop-container {
      /* Default mobile height */
      height: 60vh;
    }
    
    @media (max-aspect-ratio: 4/3) {
      .flowing-workshop-container {
        height: 70vh;
      }
    }
    
    @media (max-aspect-ratio: 3/2) {
      .flowing-workshop-container {
        height: 80vh;
      }
    }
    
    @media (max-aspect-ratio: 16/9) {
      .flowing-workshop-container {
        height: 90vh;
      }
    }
  }
</style>